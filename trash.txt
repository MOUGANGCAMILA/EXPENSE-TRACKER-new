// script.js
document.addEventListener("DOMContentLoaded", () => {
    const expenseForm = document.getElementById("expense-form");
    const expenseList = document.getElementById("expense-list");
    const totalAmount = document.getElementById("total-amount");
    const filterCategory = document.getElementById("filter-category");
    const customCategoryInput = document.getElementById("custom-category");

    let expenses = JSON.parse(localStorage.getItem("expenses")) || [];
    let editIndex = -1;

    // Display expenses on page load
    displayExpenses(filterExpenses());
    updateTotalAmount();

    // Handle form submission
    expenseForm.addEventListener("submit", (e) => {
        e.preventDefault();

        // Capture inputs
        const nameInput = document.getElementById("expense-name").value.trim();
        const amountInput = parseFloat(document.getElementById("expense-amount").value);
        const categoryInput = document.getElementById("expense-category").value === "Other" ? customCategoryInput.value.trim() : document.getElementById("expense-category").value;
        const dateInput = document.getElementById("expense-date").value;
        const noteInput = document.getElementById("expense-note").value.trim();

        // Validate inputs
        if (nameInput === "" || isNaN(amountInput) || categoryInput === "" || dateInput === "") {
            alert("Please fill in all fields correctly.");
            return;
        }

        // Create expense object
        const expense = {
            id: Date.now(),
            name: nameInput,
            amount: amountInput,
            category: categoryInput,
            date: dateInput,
            note: noteInput
        };

        if (editIndex >= 0) {
            // Update existing expense
            expenses[editIndex] = expense;
            editIndex = -1;
            expenseForm.querySelector("button").textContent = "Add Expense";
        } else {
            // Add new expense
            expenses.push(expense);
        }

        // Save to localStorage
        localStorage.setItem("expenses", JSON.stringify(expenses));

        // Reset form
        expenseForm.reset();
        document.getElementById("expense-category").selectedIndex = 0;
        customCategoryInput.style.display = "none";

        // Update display
        displayExpenses(filterExpenses());
        updateTotalAmount();
    });

    // Handle clicks on expense list
    expenseList.addEventListener("click", (e) => {
        if (e.target.classList.contains("edit-btn")) {
            const id = e.target.getAttribute("data-id");
            editExpense(id);
        } else if (e.target.classList.contains("delete-btn")) {
            const id = e.target.getAttribute("data-id");
            deleteExpense(id);
        }
    });

    // Filter expenses
    filterCategory.addEventListener("change", () => {
        displayExpenses(filterExpenses());
    });

    // Display expenses
    function displayExpenses(expensesToDisplay) {
        expenseList.innerHTML = "";
        expensesToDisplay.forEach((expense) => {
            const row = document.createElement("tr");

            row.innerHTML = `
                <td>${expense.name}</td>
                <td>${expense.amount.toFixed(2)}</td>
                <td>${expense.category}</td>
                <td>${expense.date}</td>
                <td>${expense.note}</td>
                <td>
                    <button class="edit-btn" data-id="${expense.id}">Edit</button>
                    <button class="delete-btn" data-id="${expense.id}">Delete</button>
                </td>
            `;
            expenseList.appendChild(row);
        });
    }

    // Update total amount
    function updateTotalAmount() {
        const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);
        totalAmount.textContent = total.toFixed(2);
    }

    // Edit expense
    function editExpense(id) {
        const expenseToEdit = expenses.find((expense) => expense.id == id);
        editIndex = expenses.findIndex((expense) => expense.id == id);

        document.getElementById("expense-name").value = expenseToEdit.name;
        document.getElementById("expense-amount").value = expenseToEdit.amount;
        document.getElementById("expense-category").value = expenseToEdit.category;
        document.getElementById("expense-date").value = expenseToEdit.date;
        document.getElementById("expense-note").value = expenseToEdit.note;

        expenseForm.querySelector("button").textContent = "Update Expense";
    }

    // Delete expense
    function deleteExpense(id) {
        expenses = expenses.filter((expense) => expense.id != id);
        localStorage.setItem("expenses", JSON.stringify(expenses));
        displayExpenses(filterExpenses());
        updateTotalAmount();
    }

    // Filter expenses based on category
    function filterExpenses() {
        const selectedCategory = filterCategory.value;
        if (selectedCategory === "All") {
            return expenses;
        } else {
            return expenses.filter((expense) => expense.category === selectedCategory);
        }
    }

    // Toggle custom category input visibility
    window.toggleCustomCategoryInput = function() {
        const categorySelect = document.getElementById("expense-category");
        const customCategoryInput = document.getElementById("custom-category");
        if (categorySelect.value === "Other") {
            customCategoryInput.style.display = "block";
        } else {
            customCategoryInput.style.display = "none";
        }
    };
});

















/* style.css */
body {
    font-family: Arial, sans-serif;
    background-color: #DDB699;
    margin: 0;
    padding: 20px;
}

h1 {
    text-align: center;
    color: #333;
}

form {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 10px;
    margin-bottom: 20px;
}

form input,
form select {
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

form button {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

form button:hover {
    background-color: #218838;
}

.expense-container {
    max-width: 800px;
    margin: 0 auto;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

thead {
    background-color:  #6A5143;
    color: white;
}

th,
td {
    padding: 12px;
    text-align: center;
    border: 1px solid #ddd;
}

tr:nth-child(even) {
    background-color: #f9f9f9;
}

.edit-btn,
.delete-btn {
    padding: 5px 10px;
    margin: 0 2px;
    background-color: #ffc107;
    border: none;
    color: white;
    cursor: pointer;
    border-radius: 4px;
}

.delete-btn {
    background-color: #dc3545;
}

.total {
    text-align: right;
    margin-top: 20px;
    font-size: 18px;
}

.filter {
    margin-bottom: 20px;
}

.filter label {
    margin-right: 10px;
}

.filter select {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

/* Responsive styles  */
@media (max-width: 768px) {
    body {
        padding: 10px;
    }

    form {
        flex-direction: column;
        align-items: stretch;
    }

    form input,
    form select,
    form button {
        width: 100%;
        margin-bottom: 10px;
    }

    table {
        font-size: 14px;
    }

    th,
    td {
        padding: 8px;
    }

    .total {
        font-size: 16px;
    }
}

@media (max-width: 480px) {
    h1 {
        font-size: 24px;
    }

    form input,
    form select,
    form button {
        font-size: 14px;
        padding: 8px;
    }

    table {
        font-size: 12px;
    }

    th,
    td {
        padding: 6px;
    }

    .total {
        font-size: 14px;
    }
}












































<!DOCTYPE html>
<html lang="en">    

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expense Tracker</title>
    <link rel="stylesheet" type="text/css" href="style.css" />
</head>

<body>
    <h1>Expense Tracker</h1>
    <form id="expense-form">
        <input type="text" id="expense-name" placeholder="Expense Name" required />
        <input type="number" id="expense-amount" placeholder="Amount (FCFA)" step="0.01" required />
        <select id="expense-category" required onchange="toggleCustomCategoryInput()">
            <option value="" disabled selected>Select Category</option>
            <option value="Food">Food</option>
            <option value="Transport">Transport</option>
            <option value="Research">Research</option>
            <option value="Other">Other</option>
        </select>
        <input type="text" id="custom-category" placeholder="Enter custom category" style="display: none;" />
        <input type="date" id="expense-date" required />
        <input type="text" id="expense-note" placeholder="Note"/>
        <button type="submit">Add Expense</button>
    </form>

    <div class="expense-container">
        <div class="filter">
            <label for="filter-category">Filter by Category:</label>
            <select id="filter-category">
                <option value="All">All</option>
                <option value="Food">Food</option>
                <option value="Transport">Transport</option>
                <option value="Research">Research</option>
                <option value="Other">Other</option>
            </select>
        </div>

        <table>
            <thead>
                <tr>
                    <th>Expense Name</th>
                    <th>Amount (FCFA)</th>
                    <th>Category</th>
                    <th>Date</th>
                    <th>Note</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="expense-list">
                <!-- Expenses will be displayed here -->
            </tbody>
        </table>

        <div class="total">
            <strong>Total Amount: $<span id="total-amount">0.00</span></strong>
        </div>
    </div>

    <script src="script.js"></script>
</body>

</html>


















<!--


<!DOCTYPE html>
<html>

<head>
    <title>Expense Tracker</title>
    <link rel="stylesheet" type="text/css" href="style.css" />
</head>

<body>
    <h1>Expense Tracker</h1>
    <form id="expense-form">
        <input type="text" id="expense-name" placeholder="Expense Name" required />
        <input type="number" id="expense-amount" placeholder="Amount (FCFA)" step="0.01" required />
        <select id="expense-category" required>
            <option value="" disabled selected>Select Category</option>
            <option value="Food">Food</option>
            <option value="Transport">Transport</option>
            <option value="Research">Research</option>
            <option value="Other">Other</option>
        </select>
        <input type="date" id="expense-date" required />
        <input type="text" id="expense-note" placeholder="Note" />
        <button type="submit">Add Expense</button>
    </form>

    <div class="expense-container">
        <div class="filter">
            <label for="filter-category">Filter by Category:</label>
            <select id="filter-category">
                <option value="All">All</option>
                <option value="Food">Food</option>
                <option value="Transport">Transport</option>
                <option value="Research">Research</option>
                <option value="Other">Other</option>
            </select>
        </div>

        <table>
            <thead>
                <tr>
                    <th>Expense Name</th>
                    <th>Amount (FCFA)</th>
                    <th>Category</th>
                    <th>Date</th>
                    <th>Note</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="expense-list">
                //////<-- Expenses will be displayed here -->  <!-- 
            </tbody>
        </table>

        <div class="total">
            <strong>Total Amount: $<span id="total-amount">0.00</span></strong>
        </div>
    </div>

    <script src="script.js"></script>
</body>

</html>


-->
















































// script.js
document.addEventListener("DOMContentLoaded", () => {
    const expenseForm = document.getElementById("expense-form");
    const expenseList = document.getElementById("expense-list");
    const totalAmount = document.getElementById("total-amount");
    const filterCategory = document.getElementById("filter-category");
    const customCategoryInput = document.getElementById("custom-category");

    let expenses = JSON.parse(localStorage.getItem("expenses")) || [];
    let editIndex = -1;

    // Display expenses on page load
    displayExpenses(filterExpenses());
    updateTotalAmount();

    // Handle form submission
    expenseForm.addEventListener("submit", (e) => {
        e.preventDefault();

        // Capture inputs
        const nameInput = document.getElementById("expense-name").value.trim();
        const amountInput = parseFloat(document.getElementById("expense-amount").value);
        const categoryInput = document.getElementById("expense-category").value === "Other" ? customCategoryInput.value.trim() : document.getElementById("expense-category").value;
        const dateInput = document.getElementById("expense-date").value;
        const noteInput = document.getElementById("expense-note").value.trim();

        // Validate inputs
        if (nameInput === "" || isNaN(amountInput) || categoryInput === "" || dateInput === "") {
            alert("Please fill in all fields correctly.");
            return;
        }

        // Create expense object
        const expense = {
            id: Date.now(),
            name: nameInput,
            amount: amountInput,
            category: categoryInput,
            date: dateInput,
            note: noteInput
        };

        if (editIndex >= 0) {
            // Update existing expense
            expenses[editIndex] = expense;
            editIndex = -1;
            expenseForm.querySelector("button").textContent = "Add Expense";
        } else {
            // Add new expense
            expenses.push(expense);
        }

        // Save to localStorage
        localStorage.setItem("expenses", JSON.stringify(expenses));

        // Reset form
        expenseForm.reset();
        document.getElementById("expense-category").selectedIndex = 0;
        customCategoryInput.style.display = "none";

        // Update display
        displayExpenses(filterExpenses());
        updateTotalAmount();
    });

    // Handle clicks on expense list
    expenseList.addEventListener("click", (e) => {
        if (e.target.classList.contains("edit-btn")) {
            const id = e.target.getAttribute("data-id");
            editExpense(id);
        } else if (e.target.classList.contains("delete-btn")) {
            const id = e.target.getAttribute("data-id");
            deleteExpense(id);
        }
    });

    // Filter expenses
    filterCategory.addEventListener("change", () => {
        displayExpenses(filterExpenses());
    });

    // Display expenses
    function displayExpenses(expensesToDisplay) {
        expenseList.innerHTML = "";
        expensesToDisplay.forEach((expense) => {
            const row = document.createElement("tr");
            if (expense.category === customCategoryInput.value.trim()) {
                row.classList.add("custom-category-row");
            }

            row.innerHTML = `
                <td>${expense.name}</td>
                <td>${expense.amount.toFixed(2)}</td>
                <td>${expense.category}</td>
                <td>${expense.date}</td>
                <td>${expense.note}</td>
                <td>
                    <button class="edit-btn" data-id="${expense.id}">Edit</button>
                    <button class="delete-btn" data-id="${expense.id}">Delete</button>
                </td>
            `;
            expenseList.appendChild(row);
        });
    }

    // Update total amount
    function updateTotalAmount() {
        const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);
        totalAmount.textContent = total.toFixed(2);
    }

    // Edit expense
    function editExpense(id) {
        const expenseToEdit = expenses.find((expense) => expense.id == id);
        editIndex = expenses.findIndex((expense) => expense.id == id);

        document.getElementById("expense-name").value = expenseToEdit.name;
        document.getElementById("expense-amount").value = expenseToEdit.amount;
        document.getElementById("expense-category").value = expenseToEdit.category;
        document.getElementById("expense-date").value = expenseToEdit.date;
        document.getElementById("expense-note").value = expenseToEdit.note;

        expenseForm.querySelector("button").textContent = "Update Expense";
    }

    // Delete expense
    function deleteExpense(id) {
        expenses = expenses.filter((expense) => expense.id != id);
        localStorage.setItem("expenses", JSON.stringify(expenses));
        displayExpenses(filterExpenses());
        updateTotalAmount();
    }

    // Filter expenses based on category
    function filterExpenses() {
        const selectedCategory = filterCategory.value;
        if (selectedCategory === "All") {
            return expenses;
        } else {
            return expenses.filter((expense) => expense.category === selectedCategory);
        }
    }

    // Toggle custom category input visibility
    window.toggleCustomCategoryInput = function() {
        const categorySelect = document.getElementById("expense-category");
        const customCategoryInput = document.getElementById("custom-category");
        if (categorySelect.value === "Other") {
            customCategoryInput.style.display = "block";
        } else {
            customCategoryInput.style.display = "none";
        }
    };
});












































// script.js
document.addEventListener("DOMContentLoaded", () => {
    const expenseForm = document.getElementById("expense-form");
    const expenseList = document.getElementById("expense-list");
    const totalAmount = document.getElementById("total-amount");
    const filterCategory = document.getElementById("filter-category");
    const customCategoryInput = document.getElementById("custom-category");
    const filterCustomCategoryInput = document.getElementById("filter-custom-category");

    let expenses = JSON.parse(localStorage.getItem("expenses")) || [];
    let editIndex = -1;

    // Display expenses on page load
    displayExpenses(filterExpenses());
    updateTotalAmount();

    // Handle form submission
    expenseForm.addEventListener("submit", (e) => {
        e.preventDefault();

        // Capture inputs
        const nameInput = document.getElementById("expense-name").value.trim();
        const amountInput = parseFloat(document.getElementById("expense-amount").value);
        const categoryInput = document.getElementById("expense-category").value === "Other" ? customCategoryInput.value.trim() : document.getElementById("expense-category").value;
        const dateInput = document.getElementById("expense-date").value;
        const noteInput = document.getElementById("expense-note").value.trim();

        // Validate inputs
        if (nameInput === "" || isNaN(amountInput) || categoryInput === "" || dateInput === "") {
            alert("Please fill in all fields correctly.");
            return;
        }

        // Create expense object
        const expense = {
            id: Date.now(),
            name: nameInput,
            amount: amountInput,
            category: categoryInput,
            date: dateInput,
            note: noteInput
        };

        if (editIndex >= 0) {
            // Update existing expense
            expenses[editIndex] = expense;
            editIndex = -1;
            expenseForm.querySelector("button").textContent = "Add Expense";
        } else {
            // Add new expense
            expenses.push(expense);
        }

        // Save to localStorage
        localStorage.setItem("expenses", JSON.stringify(expenses));

        // Reset form
        expenseForm.reset();
        document.getElementById("expense-category").selectedIndex = 0;
        customCategoryInput.style.display = "none";

        // Update display
        displayExpenses(filterExpenses());
        updateTotalAmount();
    });

    // Handle clicks on expense list
    expenseList.addEventListener("click", (e) => {
        if (e.target.classList.contains("edit-btn")) {
            const id = e.target.getAttribute("data-id");
            editExpense(id);
        } else if (e.target.classList.contains("delete-btn")) {
            const id = e.target.getAttribute("data-id");
            deleteExpense(id);
        }
    });

    // Filter expenses
    filterCategory.addEventListener("change", () => {
        displayExpenses(filterExpenses());
    });

    filterCustomCategoryInput.addEventListener("input", () => {
        displayExpenses(filterExpenses());
    });

    // Display expenses
    function displayExpenses(expensesToDisplay) {
        expenseList.innerHTML = "";
        expensesToDisplay.forEach((expense) => {
            const row = document.createElement("tr");
            if (expense.category === customCategoryInput.value.trim()) {
                row.classList.add("custom-category-row");
            }

            row.innerHTML = `
                <td>${expense.name}</td>
                <td>${expense.amount.toFixed(2)}</td>
                <td>${expense.category}</td>
                <td>${expense.date}</td>
                <td>${expense.note}</td>
                <td>
                    <button class="edit-btn" data-id="${expense.id}">Edit</button>
                    <button class="delete-btn" data-id="${expense.id}">Delete</button>
                </td>
            `;
            expenseList.appendChild(row);
        });
    }

    // Update total amount
    function updateTotalAmount() {
        const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);
        totalAmount.textContent = total.toFixed(2);
    }

    // Edit expense
    function editExpense(id) {
        const expenseToEdit = expenses.find((expense) => expense.id == id);
        editIndex = expenses.findIndex((expense) => expense.id == id);

        document.getElementById("expense-name").value = expenseToEdit.name;
        document.getElementById("expense-amount").value = expenseToEdit.amount;
        document.getElementById("expense-category").value = expenseToEdit.category;
        document.getElementById("expense-date").value = expenseToEdit.date;
        document.getElementById("expense-note").value = expenseToEdit.note;

        expenseForm.querySelector("button").textContent = "Update Expense";
    }

    // Delete expense
    function deleteExpense(id) {
        expenses = expenses.filter((expense) => expense.id != id);
        localStorage.setItem("expenses", JSON.stringify(expenses));
        displayExpenses(filterExpenses());
        updateTotalAmount();
    }

    // Filter expenses based on category
    function filterExpenses() {
        const selectedCategory = filterCategory.value;
        const customCategory = filterCustomCategoryInput.value.trim();
        if (selectedCategory === "All") {
            return expenses;
        } else if (selectedCategory === "Other" && customCategory !== "") {
            return expenses.filter((expense) => expense.category === customCategory);
        } else {
            return expenses.filter((expense) => expense.category === selectedCategory);
        }
    }

    // Toggle custom category input visibility
    window.toggleCustomCategoryInput = function() {
        const categorySelect = document.getElementById("expense-category");
        const customCategoryInput = document.getElementById("custom-category");
        if (categorySelect.value === "Other") {
            customCategoryInput.style.display = "block";
        } else {
            customCategoryInput.style.display = "none";
        }
    };

    // Toggle custom category filter input visibility
    window.toggleCustomCategoryFilterInput = function() {
        const filterCategorySelect = document.getElementById("filter-category");
        const filterCustomCategoryInput = document.getElementById("filter-custom-category");
        if (filterCategorySelect.value === "Other") {
            filterCustomCategoryInput.style.display = "block";
        } else {
            filterCustomCategoryInput.style.display = "none";
            filterCustomCategoryInput.value = "";
            displayExpenses(filterExpenses());
        }
    };
});




































